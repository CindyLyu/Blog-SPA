{"version":3,"sources":["BlogList.js","BlogArticle.js","BlogAbout.js","App.js","serviceWorker.js","index.js"],"names":["BlogList","props","handleToArticle","id","toArticle","active","state","post","fetch","method","then","response","json","data","setState","this","className","map","item","key","onClick","title","Component","BlogArticle","result","body","BlogAbout","onChangePage","page","window","location","hash","App","_onHashChange","addEventListener","removeEventListener","value","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAgDeA,G,kBA1Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,gBAAkB,SAACC,IAEjBC,EADsB,EAAKH,MAAnBG,WACE,CACRC,OAAQ,UACRF,QAnBF,EAAKG,MAAQ,CACXC,KAAM,IAHS,E,iFAOE,IAAD,OAClBC,MAAM,6CAA8C,CAAEC,OAAQ,QAC3DC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZP,KAAMM,S,+BAcJ,IAAD,OACCN,EAASQ,KAAKT,MAAdC,KACR,OACE,6BAASS,UAAU,cACjB,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,mBADlB,4BAKET,EAAKU,KAAI,SAAAC,GAAI,OAAI,4BAAQF,UAAU,qBAAqBG,IAAKD,EAAKf,GAAIiB,QAAS,kBAAM,EAAKlB,gBAAgBgB,EAAKf,MAAMe,EAAKG,e,GApC7GC,cCgCRC,E,YA/Bb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CACXC,KAAM,IAHS,E,iFAOE,IAAD,OACVM,EAASE,KAAKd,MAAdY,KACRL,MAAM,8CAAD,OAA+CK,GAAQ,CAAEJ,OAAQ,QACnEC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAc,GACJ,EAAKV,SAAS,CACZP,KAAMiB,S,+BAKJ,IACAjB,EAASQ,KAAKT,MAAdC,KACR,OACE,6BAASS,UAAU,iBACjB,yBAAKA,UAAU,uBAAwBT,EAAKc,MAAuBd,EAAKc,MAApB,cACpD,yBAAKL,UAAU,yBAAyBT,EAAKkB,W,GAxB3BH,aCSXI,MAXf,WACE,OACE,6BAASV,UAAU,eACjB,uBAAGA,UAAU,oBACb,yBAAKA,UAAU,qBAAf,QACA,yBAAKA,UAAU,wBAAf,gGCCN,SAASW,EAAaC,GACpBC,OAAOC,SAASC,KAAOH,E,IAmDVI,E,YA/Cb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KAeRgC,cAAgB,WACd,EAAKnB,SAAS,CACZT,OAAQwB,OAAOC,SAASC,QAlBT,EAsBnB7B,gBAAkB,SAACW,GACjB,EAAKC,SAAS,CACZX,GAAIU,EAAKV,IAAM,KAEjBwB,EAAad,EAAKR,SAxBlB,EAAKC,MAAQ,CACXD,OAAQwB,OAAOC,SAASC,MAAQ,QAChC5B,GAAI,IAJW,E,iFASjB0B,OAAOK,iBAAiB,aAAcnB,KAAKkB,iB,6CAI3CJ,OAAOM,oBAAoB,aAAcpB,KAAKkB,iB,+BAgBtC,IAAD,EACgBlB,KAAKT,MAApBD,EADD,EACCA,OAAQF,EADT,EACSA,GAChB,OACE,0BAAMa,UAAU,QACd,yBAAKA,UAAU,aACb,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,iBAAiBoB,MAAM,OAAOhB,QAAS,WAAQO,EAAa,UAA5E,QACA,0BAAMX,UAAU,kBAAkBI,QAAS,WAAQO,EAAa,WAAhE,UAEU,UAAXtB,EAAoB,kBAAC,EAAD,CAAUD,UAAWW,KAAKb,kBAAsB,KACzD,aAAXG,EAAwB,kBAAC,EAAD,CAAaQ,KAAMV,IAAS,KACzC,WAAXE,EAAsB,kBAAC,EAAD,MAAgB,U,GAzC7BiB,aCDEe,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.436b3222.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react';\n\n\nclass BlogList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/posts', { method: 'get' })\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          post: data,\n        });\n      });\n  }\n\n  handleToArticle = (id) => {\n    const { toArticle } = this.props;\n    toArticle({\n      active: 'article',\n      id,\n    });\n  }\n\n\n  render() {\n    const { post } = this.state;\n    return (\n      <section className=\"blog__list\">\n        <div className=\"blog__list-title\">\n          <span className=\"fas fa-list-ul\" />\n            文章列表\n        </div>\n        {\n          post.map(item => <option className=\"blog__list-aritcle\" key={item.id} onClick={() => this.handleToArticle(item.id)}>{item.title}</option>)\n        }\n      </section>\n    );\n  }\n}\n\nexport default BlogList;\n","/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react';\n\n\nclass BlogArticle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: [],\n    };\n  }\n\n  componentDidMount() {\n    const { data } = this.props;\n    fetch(`https://jsonplaceholder.typicode.com/posts/${data}`, { method: 'get' })\n      .then(response => response.json())\n      .then(result => {\n        this.setState({\n          post: result,\n        });\n      });\n  }\n\n  render() {\n    const { post } = this.state;\n    return (\n      <section className=\"blog__article\">\n        <div className=\"blog__article-title\">{!post.title ? 'Loading...' : post.title}</div>\n        <div className=\"blog__article-content\">{post.body}</div>\n      </section>\n\n    );\n  }\n}\n\n\nexport default BlogArticle;\n","import React from 'react';\n\n\nfunction BlogAbout() {\n  return (\n    <section className=\"blog__about\">\n      <i className=\"fas fa-user-alt\" />\n      <div className=\"blog__about-title\">Name</div>\n      <div className=\"blog__abount-content\">哩後，關於我關於我關於我甘魚我</div>\n    </section>\n  );\n}\n\n\nexport default BlogAbout;\n","/* eslint-disable no-underscore-dangle */\n\nimport React, { Component } from 'react';\nimport './index.sass';\nimport BlogList from './BlogList';\nimport BlogArticle from './BlogArticle';\nimport BlogAbout from './BlogAbout';\n\n\nfunction onChangePage(page) {\n  window.location.hash = page;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: window.location.hash || '#list',\n      id: '',\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', this._onHashChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this._onHashChange);\n  }\n\n  _onHashChange = () => {\n    this.setState({\n      active: window.location.hash,\n    });\n  }\n\n  handleToArticle = (data) => {\n    this.setState({\n      id: data.id || '',\n    });\n    onChangePage(data.active);\n  }\n\n  render() {\n    const { active, id } = this.state;\n    return (\n      <main className=\"blog\">\n        <nav className=\"blog__nav\">\n          <item className=\"blog__nav-name\">Blog</item>\n          <item className=\"blog__nav-list\" value=\"list\" onClick={() => { onChangePage('list'); }}>List</item>\n          <item className=\"blog__nav-about\" onClick={() => { onChangePage('about'); }}>About</item>\n        </nav>\n        {active === '#list'? <BlogList toArticle={this.handleToArticle} /> : null}\n        {active === '#article' ? <BlogArticle data={id} /> : null}\n        {active === '#about' ? <BlogAbout /> : null}\n      </main>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}