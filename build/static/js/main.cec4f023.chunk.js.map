{"version":3,"sources":["BlogList.js","BlogArticle.js","BlogAbout.js","App.js","serviceWorker.js","index.js","background-image.jpg"],"names":["axios","require","BlogList","props","state","post","get","then","response","setState","data","this","history","className","src","map","item","key","id","onClick","push","title","body","Component","withRouter","BlogArticle","match","params","postId","author","source","BlogAbout","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"sNAIMA,EAAQC,EAAQ,IAGhBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAHS,E,iFAOE,IAAD,OAClBL,EAAMM,IAAI,6BACPC,MAAK,SAAAC,GAAQ,OACZ,EAAKC,SAAS,CACZJ,KAAMG,EAASE,Y,+BAKb,IACAL,EAASM,KAAKP,MAAdC,KACAO,EAAYD,KAAKR,MAAjBS,QACR,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,iBAAiBC,IAAKb,EAAQ,MAC7C,6BAASY,UAAU,cACjB,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,mBADlB,4BAKIR,EAAKU,KAAI,SAAAC,GAAI,OACX,yBAAKH,UAAU,kBAAkBI,IAAKD,EAAKE,GAAIC,QAAS,WAAOP,EAAQQ,KAAK,SAAWJ,EAAKE,MAC1F,yBAAKL,UAAU,yBAAyBG,EAAKK,OAC7C,yBAAKR,UAAU,yBACf,yBAAKA,UAAU,2BAA2BG,EAAKM,MAC/C,yBAAKT,UAAU,uBAAf,uB,GAlCKU,aA6CRC,cAAWtB,G,iBChDpBF,EAAQC,EAAQ,IAqCPwB,E,YAjCb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAHS,E,iFAOE,IAAD,OACZa,EAAKP,KAAKR,MAAMuB,MAAMC,OAAOC,OACnC5B,EAAMM,IAAN,oCAAuCY,IACpCX,MAAK,SAAAC,GAAQ,OACZ,EAAKC,SAAS,CACZJ,KAAMG,EAASE,Y,+BAKb,IACAL,EAASM,KAAKP,MAAdC,KACR,OACE,kBAAC,WAAD,KACE,yBAAKQ,UAAU,oBAAoBC,IAAI,gEACvC,6BAASD,UAAU,iBACjB,yBAAKA,UAAU,uBAAuBR,EAAKgB,MAAQhB,EAAKgB,MAAQ,cAChE,yBAAKR,UAAU,wBAAuB,uBAAGA,UAAU,gBAAmBR,EAAKwB,OAASxB,EAAKwB,OAAS,gBAClG,yBAAKhB,UAAU,yBAAwB,kBAAC,IAAD,CAAeiB,OAAQzB,EAAKiB,c,GA1BnDC,aCQXQ,MAZf,WACE,OACE,kBAAC,WAAD,KACE,6BAASlB,UAAU,eACjB,yBAAKA,UAAU,kBAAkBC,IAAI,iEACrC,yBAAKD,UAAU,uBAAf,iGCmBOmB,MAnBf,WACE,OACE,kBAAC,IAAD,KACI,0BAAMnB,UAAU,QACd,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,iBAAiBoB,GAAG,IAAIC,MAAM,QAA9C,OACA,kBAAC,IAAD,CAAMrB,UAAU,iBAAiBoB,GAAG,QAAQC,MAAM,QAAlD,QACA,kBAAC,IAAD,CAAMrB,UAAU,kBAAkBoB,GAAG,UAArC,UAEF,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,QAAQC,UAAWlC,IACrC,kBAAC,IAAD,CAAOiC,KAAK,SAASC,UAAWL,IAChC,kBAAC,IAAD,CAAOI,KAAK,gBAAgBC,UAAWX,OCR7BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2DCbNe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,+C","file":"static/js/main.cec4f023.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, withRouter } from \"react-router-dom\";\nconst axios = require('axios');\n\n\nclass BlogList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: [],\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://qootest.com/posts')\n      .then(response => \n        this.setState({\n          post: response.data\n        })\n      )\n  }\n\n  render() {\n    const { post } = this.state;\n    const { history } = this.props;\n    return (\n      <Router>\n        <img className='blog__list-img' src={require('./background-image.jpg')} />\n        <section className=\"blog__list\">\n          <div className=\"blog__list-title\">\n            <span className=\"fas fa-list-ul\" />\n              文章列表\n          </div>\n            {\n              post.map(item => \n                <div className='blog__list-body' key={item.id} onClick={() => {history.push('/post/' + item.id)}}>\n                  <div className=\"blog__list-body-title\">{item.title}</div>\n                  <div className='blog__list-body-line'></div>\n                  <div className='blog__list-body-content'>{item.body}</div>\n                  <div className='blog__list-readmore'>Read more</div>\n                </div>\n              )\n            }\n        </section>\n      </Router>\n    );\n  }\n}\n\n\nexport default withRouter(BlogList);\n","/* eslint-disable react/prop-types */\n\nimport React, { Component, Fragment } from 'react';\nimport ReactMarkdown from 'react-markdown'\nconst axios = require('axios');\n\n\nclass BlogArticle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: [],\n    };\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.postId;\n    axios.get(`https://qootest.com/posts/${id}`)\n      .then(response => \n        this.setState({\n          post: response.data\n        })\n      )\n  }\n\n  render() {\n    const { post } = this.state;\n    return (\n      <Fragment>\n        <img className='blog__article-img' src=\"https://fakeimg.pl/1600x600/dbdbdb/?text=picture&font=bebas\" />\n        <section className=\"blog__article\">\n          <div className=\"blog__article-title\">{post.title ? post.title : 'Loading...'}</div>\n          <div className=\"blog__article-author\"><i className=\"fas fa-user\"></i>{post.author ? post.author : '匿名'}</div>\n          <div className=\"blog__article-content\"><ReactMarkdown source={post.body} /></div>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\n\nexport default BlogArticle;\n","import React, { Fragment } from 'react';\n\n\nfunction BlogAbout() {\n  return (\n    <Fragment>\n      <section className=\"blog__about\">\n        <img className='blog__about-img' src=\"https://fakeimg.pl/1200x1200/dbdbdb/?text=picture&font=bebas\" />\n        <div className=\"blog__about-content\">哩後，關於我關於我關於我甘魚我</div>\n      </section>\n    </Fragment>\n  );\n}\n\n\nexport default BlogAbout;\n","import React from 'react';\nimport './index.sass';\nimport BlogList from './BlogList';\nimport BlogArticle from './BlogArticle';\nimport BlogAbout from './BlogAbout';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n        <main className=\"blog\">\n          <nav className=\"blog__nav\">\n            <Link className=\"blog__nav-name\" to='/' exact='true'>LYU</Link>\n            <Link className=\"blog__nav-list\" to='/post' exact='true'>List</Link>\n            <Link className=\"blog__nav-about\" to='/about'>About</Link>\n          </nav>\n          <Route exact path='/' component={BlogList} />\n          <Route exact path='/post' component={BlogList} />\n          <Route path='/about' component={BlogAbout} />\n          <Route path='/post/:postId' component={BlogArticle} />\n        </main> \n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background-image.81b52042.jpg\";"],"sourceRoot":""}